// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: grpc_receiver.proto

package grpc_receiver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SequencerGrpcCollectorService_SubmitSequencerTransaction_FullMethodName = "/astria.composer.v1alpha1.SequencerGrpcCollectorService/SubmitSequencerTransaction"
)

// SequencerGrpcCollectorServiceClient is the client API for SequencerGrpcCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerGrpcCollectorServiceClient interface {
	// SubmitRollupTransaction submits a rollup transactions to the Composer.
	// The transaction sent is bundled up with other transactions and submitted to the Shared Sequencer Network.
	SubmitSequencerTransaction(ctx context.Context, in *SubmitSequencerTransactionRequest, opts ...grpc.CallOption) (*SubmitSequencerTransactionResponse, error)
}

type sequencerGrpcCollectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerGrpcCollectorServiceClient(cc grpc.ClientConnInterface) SequencerGrpcCollectorServiceClient {
	return &sequencerGrpcCollectorServiceClient{cc}
}

func (c *sequencerGrpcCollectorServiceClient) SubmitSequencerTransaction(ctx context.Context, in *SubmitSequencerTransactionRequest, opts ...grpc.CallOption) (*SubmitSequencerTransactionResponse, error) {
	out := new(SubmitSequencerTransactionResponse)
	err := c.cc.Invoke(ctx, SequencerGrpcCollectorService_SubmitSequencerTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerGrpcCollectorServiceServer is the server API for SequencerGrpcCollectorService service.
// All implementations must embed UnimplementedSequencerGrpcCollectorServiceServer
// for forward compatibility
type SequencerGrpcCollectorServiceServer interface {
	// SubmitRollupTransaction submits a rollup transactions to the Composer.
	// The transaction sent is bundled up with other transactions and submitted to the Shared Sequencer Network.
	SubmitSequencerTransaction(context.Context, *SubmitSequencerTransactionRequest) (*SubmitSequencerTransactionResponse, error)
	mustEmbedUnimplementedSequencerGrpcCollectorServiceServer()
}

// UnimplementedSequencerGrpcCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequencerGrpcCollectorServiceServer struct {
}

func (UnimplementedSequencerGrpcCollectorServiceServer) SubmitSequencerTransaction(context.Context, *SubmitSequencerTransactionRequest) (*SubmitSequencerTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSequencerTransaction not implemented")
}
func (UnimplementedSequencerGrpcCollectorServiceServer) mustEmbedUnimplementedSequencerGrpcCollectorServiceServer() {
}

// UnsafeSequencerGrpcCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerGrpcCollectorServiceServer will
// result in compilation errors.
type UnsafeSequencerGrpcCollectorServiceServer interface {
	mustEmbedUnimplementedSequencerGrpcCollectorServiceServer()
}

func RegisterSequencerGrpcCollectorServiceServer(s grpc.ServiceRegistrar, srv SequencerGrpcCollectorServiceServer) {
	s.RegisterService(&SequencerGrpcCollectorService_ServiceDesc, srv)
}

func _SequencerGrpcCollectorService_SubmitSequencerTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSequencerTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerGrpcCollectorServiceServer).SubmitSequencerTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerGrpcCollectorService_SubmitSequencerTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerGrpcCollectorServiceServer).SubmitSequencerTransaction(ctx, req.(*SubmitSequencerTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerGrpcCollectorService_ServiceDesc is the grpc.ServiceDesc for SequencerGrpcCollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerGrpcCollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "astria.composer.v1alpha1.SequencerGrpcCollectorService",
	HandlerType: (*SequencerGrpcCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSequencerTransaction",
			Handler:    _SequencerGrpcCollectorService_SubmitSequencerTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_receiver.proto",
}
