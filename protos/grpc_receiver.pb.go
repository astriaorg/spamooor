// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: grpc_receiver.proto

package grpc_receiver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A 128 bit unsigned integer encoded in protobuf.,
//
// Protobuf does not support integers larger than 64 bits,
// so this message encodes a u128 by splitting it into its
// upper 64 and lower 64 bits, each encoded as a uint64.
//
// A native u128 x can then be constructed by casting both
// integers to u128, left shifting hi by 64 positions and
// adding lo:
//
// x = (hi as u128) << 64 + (lo as u128)
type Uint128 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lo uint64 `protobuf:"varint,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi uint64 `protobuf:"varint,2,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (x *Uint128) Reset() {
	*x = Uint128{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint128) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint128) ProtoMessage() {}

func (x *Uint128) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint128.ProtoReflect.Descriptor instead.
func (*Uint128) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{0}
}

func (x *Uint128) GetLo() uint64 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *Uint128) GetHi() uint64 {
	if x != nil {
		return x.Hi
	}
	return 0
}

// A proof for a tree of the given size containing the audit path from a leaf to the root.
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sequence of 32 byte hashes used to reconstruct a Merkle Tree Hash.
	AuditPath []byte `protobuf:"bytes,1,opt,name=audit_path,json=auditPath,proto3" json:"audit_path,omitempty"`
	// The index of the leaf this proof applies to.
	LeafIndex uint64 `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex,proto3" json:"leaf_index,omitempty"`
	// The total size of the tree this proof was derived from.
	TreeSize uint64 `protobuf:"varint,3,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{1}
}

func (x *Proof) GetAuditPath() []byte {
	if x != nil {
		return x.AuditPath
	}
	return nil
}

func (x *Proof) GetLeafIndex() uint64 {
	if x != nil {
		return x.LeafIndex
	}
	return 0
}

func (x *Proof) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

// / Represents a denomination of some asset used within the sequencer.
// / The `id` is used to identify the asset and for balance accounting.
type Denom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
}

func (x *Denom) Reset() {
	*x = Denom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Denom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Denom) ProtoMessage() {}

func (x *Denom) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Denom.ProtoReflect.Descriptor instead.
func (*Denom) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{2}
}

func (x *Denom) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Denom) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

// A `RollupId` is a unique identifier for a rollup chain.
// It must be 32 bytes long. It can be derived from a string
// using a sha256 hash.
type RollupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *RollupId) Reset() {
	*x = RollupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupId) ProtoMessage() {}

func (x *RollupId) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupId.ProtoReflect.Descriptor instead.
func (*RollupId) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{3}
}

func (x *RollupId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// An Astria `Address`.
//
// Astria addresses are bech32m encoded strings, with the data part being the
// first 20 entries of a sha256-hashed ed25519 public key.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bech32m encoded string. The data are the first 20 bytes of a sha256-hashed ed25519
	// public key. Implementors must not accept both the `bytes` and `bech32m` being set.
	Bech32M string `protobuf:"bytes,2,opt,name=bech32m,proto3" json:"bech32m,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{4}
}

func (x *Address) GetBech32M() string {
	if x != nil {
		return x.Bech32M
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Action_TransferAction
	//	*Action_SequenceAction
	//	*Action_InitBridgeAccountAction
	//	*Action_BridgeLockAction
	//	*Action_BridgeUnlockAction
	//	*Action_BridgeSudoChangeAction
	//	*Action_Ics20Withdrawal
	//	*Action_SudoAddressChangeAction
	//	*Action_IbcRelayerChangeAction
	//	*Action_FeeAssetChangeAction
	//	*Action_FeeChangeAction
	Value isAction_Value `protobuf_oneof:"value"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{5}
}

func (m *Action) GetValue() isAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Action) GetTransferAction() *TransferAction {
	if x, ok := x.GetValue().(*Action_TransferAction); ok {
		return x.TransferAction
	}
	return nil
}

func (x *Action) GetSequenceAction() *SequenceAction {
	if x, ok := x.GetValue().(*Action_SequenceAction); ok {
		return x.SequenceAction
	}
	return nil
}

func (x *Action) GetInitBridgeAccountAction() *InitBridgeAccountAction {
	if x, ok := x.GetValue().(*Action_InitBridgeAccountAction); ok {
		return x.InitBridgeAccountAction
	}
	return nil
}

func (x *Action) GetBridgeLockAction() *BridgeLockAction {
	if x, ok := x.GetValue().(*Action_BridgeLockAction); ok {
		return x.BridgeLockAction
	}
	return nil
}

func (x *Action) GetBridgeUnlockAction() *BridgeUnlockAction {
	if x, ok := x.GetValue().(*Action_BridgeUnlockAction); ok {
		return x.BridgeUnlockAction
	}
	return nil
}

func (x *Action) GetBridgeSudoChangeAction() *BridgeSudoChangeAction {
	if x, ok := x.GetValue().(*Action_BridgeSudoChangeAction); ok {
		return x.BridgeSudoChangeAction
	}
	return nil
}

func (x *Action) GetIcs20Withdrawal() *Ics20Withdrawal {
	if x, ok := x.GetValue().(*Action_Ics20Withdrawal); ok {
		return x.Ics20Withdrawal
	}
	return nil
}

func (x *Action) GetSudoAddressChangeAction() *SudoAddressChangeAction {
	if x, ok := x.GetValue().(*Action_SudoAddressChangeAction); ok {
		return x.SudoAddressChangeAction
	}
	return nil
}

func (x *Action) GetIbcRelayerChangeAction() *IbcRelayerChangeAction {
	if x, ok := x.GetValue().(*Action_IbcRelayerChangeAction); ok {
		return x.IbcRelayerChangeAction
	}
	return nil
}

func (x *Action) GetFeeAssetChangeAction() *FeeAssetChangeAction {
	if x, ok := x.GetValue().(*Action_FeeAssetChangeAction); ok {
		return x.FeeAssetChangeAction
	}
	return nil
}

func (x *Action) GetFeeChangeAction() *FeeChangeAction {
	if x, ok := x.GetValue().(*Action_FeeChangeAction); ok {
		return x.FeeChangeAction
	}
	return nil
}

type isAction_Value interface {
	isAction_Value()
}

type Action_TransferAction struct {
	// Core protocol actions are defined on 1-10
	TransferAction *TransferAction `protobuf:"bytes,1,opt,name=transfer_action,json=transferAction,proto3,oneof"`
}

type Action_SequenceAction struct {
	SequenceAction *SequenceAction `protobuf:"bytes,2,opt,name=sequence_action,json=sequenceAction,proto3,oneof"`
}

type Action_InitBridgeAccountAction struct {
	// Bridge actions are defined on 11-20
	InitBridgeAccountAction *InitBridgeAccountAction `protobuf:"bytes,11,opt,name=init_bridge_account_action,json=initBridgeAccountAction,proto3,oneof"`
}

type Action_BridgeLockAction struct {
	BridgeLockAction *BridgeLockAction `protobuf:"bytes,12,opt,name=bridge_lock_action,json=bridgeLockAction,proto3,oneof"`
}

type Action_BridgeUnlockAction struct {
	BridgeUnlockAction *BridgeUnlockAction `protobuf:"bytes,13,opt,name=bridge_unlock_action,json=bridgeUnlockAction,proto3,oneof"`
}

type Action_BridgeSudoChangeAction struct {
	BridgeSudoChangeAction *BridgeSudoChangeAction `protobuf:"bytes,14,opt,name=bridge_sudo_change_action,json=bridgeSudoChangeAction,proto3,oneof"`
}

type Action_Ics20Withdrawal struct {
	// IBC user actions are defined on 21-30
	Ics20Withdrawal *Ics20Withdrawal `protobuf:"bytes,21,opt,name=ics20_withdrawal,json=ics20Withdrawal,proto3,oneof"`
}

type Action_SudoAddressChangeAction struct {
	// POA sudo actions are defined on 50-60
	SudoAddressChangeAction *SudoAddressChangeAction `protobuf:"bytes,50,opt,name=sudo_address_change_action,json=sudoAddressChangeAction,proto3,oneof"`
}

type Action_IbcRelayerChangeAction struct {
	IbcRelayerChangeAction *IbcRelayerChangeAction `protobuf:"bytes,51,opt,name=ibc_relayer_change_action,json=ibcRelayerChangeAction,proto3,oneof"`
}

type Action_FeeAssetChangeAction struct {
	FeeAssetChangeAction *FeeAssetChangeAction `protobuf:"bytes,52,opt,name=fee_asset_change_action,json=feeAssetChangeAction,proto3,oneof"`
}

type Action_FeeChangeAction struct {
	FeeChangeAction *FeeChangeAction `protobuf:"bytes,53,opt,name=fee_change_action,json=feeChangeAction,proto3,oneof"`
}

func (*Action_TransferAction) isAction_Value() {}

func (*Action_SequenceAction) isAction_Value() {}

func (*Action_InitBridgeAccountAction) isAction_Value() {}

func (*Action_BridgeLockAction) isAction_Value() {}

func (*Action_BridgeUnlockAction) isAction_Value() {}

func (*Action_BridgeSudoChangeAction) isAction_Value() {}

func (*Action_Ics20Withdrawal) isAction_Value() {}

func (*Action_SudoAddressChangeAction) isAction_Value() {}

func (*Action_IbcRelayerChangeAction) isAction_Value() {}

func (*Action_FeeAssetChangeAction) isAction_Value() {}

func (*Action_FeeChangeAction) isAction_Value() {}

// `TransferAction` represents a value transfer transaction.
//
// Note: all values must be set (ie. not `None`), otherwise it will
// be considered invalid by the sequencer.
type TransferAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To     *Address `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Amount *Uint128 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// the asset to be transferred
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,4,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
}

func (x *TransferAction) Reset() {
	*x = TransferAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAction) ProtoMessage() {}

func (x *TransferAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAction.ProtoReflect.Descriptor instead.
func (*TransferAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{6}
}

func (x *TransferAction) GetTo() *Address {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransferAction) GetAmount() *Uint128 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferAction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TransferAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

// `SequenceAction` represents a transaction destined for another
// chain, ordered by the sequencer.
//
// It contains the rollup ID of the destination chain, and the
// opaque transaction data.
type SequenceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollupId *RollupId `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	Data     []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,3,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
}

func (x *SequenceAction) Reset() {
	*x = SequenceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceAction) ProtoMessage() {}

func (x *SequenceAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceAction.ProtoReflect.Descriptor instead.
func (*SequenceAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{7}
}

func (x *SequenceAction) GetRollupId() *RollupId {
	if x != nil {
		return x.RollupId
	}
	return nil
}

func (x *SequenceAction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SequenceAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

// / `SudoAddressChangeAction` represents a transaction that changes
// / the sudo address of the chain, which is the address authorized to
// / make validator update actions.
// /
// / It contains the new sudo address.
type SudoAddressChangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAddress *Address `protobuf:"bytes,1,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
}

func (x *SudoAddressChangeAction) Reset() {
	*x = SudoAddressChangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SudoAddressChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SudoAddressChangeAction) ProtoMessage() {}

func (x *SudoAddressChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SudoAddressChangeAction.ProtoReflect.Descriptor instead.
func (*SudoAddressChangeAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{8}
}

func (x *SudoAddressChangeAction) GetNewAddress() *Address {
	if x != nil {
		return x.NewAddress
	}
	return nil
}

type Ics20Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// first two fields are a transparent value consisting of an amount and a denom.
	Amount *Uint128 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom  string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// the address on the destination chain to send the transfer to.
	// this is not validated by Astria; it is up to the destination chain
	// to interpret it.
	DestinationChainAddress string `protobuf:"bytes,3,opt,name=destination_chain_address,json=destinationChainAddress,proto3" json:"destination_chain_address,omitempty"`
	// an Astria address to use to return funds from this withdrawal
	// in the case it fails.
	ReturnAddress *Address `protobuf:"bytes,4,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
	// the height (on Astria) at which this transfer expires.
	TimeoutHeight *IbcHeight `protobuf:"bytes,5,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	// the unix timestamp (in nanoseconds) at which this transfer expires.
	TimeoutTime uint64 `protobuf:"varint,6,opt,name=timeout_time,json=timeoutTime,proto3" json:"timeout_time,omitempty"`
	// the source channel used for the withdrawal.
	SourceChannel string `protobuf:"bytes,7,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,8,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	// a memo to include with the transfer
	Memo string `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo,omitempty"`
	// the address of the bridge account to transfer from, if this is a withdrawal
	// from a bridge account and the sender of the tx is the bridge's withdrawer,
	// which differs from the bridge account's address.
	//
	// if unset, and the transaction sender is not a bridge account, the withdrawal
	// is treated as a user (non-bridge) withdrawal.
	//
	// if unset, and the transaction sender is a bridge account, the withdrawal is
	// treated as a bridge withdrawal (ie. the bridge account's withdrawer address is checked).
	BridgeAddress *Address `protobuf:"bytes,10,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
}

func (x *Ics20Withdrawal) Reset() {
	*x = Ics20Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ics20Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ics20Withdrawal) ProtoMessage() {}

func (x *Ics20Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ics20Withdrawal.ProtoReflect.Descriptor instead.
func (*Ics20Withdrawal) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{9}
}

func (x *Ics20Withdrawal) GetAmount() *Uint128 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Ics20Withdrawal) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Ics20Withdrawal) GetDestinationChainAddress() string {
	if x != nil {
		return x.DestinationChainAddress
	}
	return ""
}

func (x *Ics20Withdrawal) GetReturnAddress() *Address {
	if x != nil {
		return x.ReturnAddress
	}
	return nil
}

func (x *Ics20Withdrawal) GetTimeoutHeight() *IbcHeight {
	if x != nil {
		return x.TimeoutHeight
	}
	return nil
}

func (x *Ics20Withdrawal) GetTimeoutTime() uint64 {
	if x != nil {
		return x.TimeoutTime
	}
	return 0
}

func (x *Ics20Withdrawal) GetSourceChannel() string {
	if x != nil {
		return x.SourceChannel
	}
	return ""
}

func (x *Ics20Withdrawal) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

func (x *Ics20Withdrawal) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Ics20Withdrawal) GetBridgeAddress() *Address {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

type IbcHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevisionNumber uint64 `protobuf:"varint,1,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	RevisionHeight uint64 `protobuf:"varint,2,opt,name=revision_height,json=revisionHeight,proto3" json:"revision_height,omitempty"`
}

func (x *IbcHeight) Reset() {
	*x = IbcHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IbcHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbcHeight) ProtoMessage() {}

func (x *IbcHeight) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbcHeight.ProtoReflect.Descriptor instead.
func (*IbcHeight) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{10}
}

func (x *IbcHeight) GetRevisionNumber() uint64 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *IbcHeight) GetRevisionHeight() uint64 {
	if x != nil {
		return x.RevisionHeight
	}
	return 0
}

// `IbcRelayerChangeAction` represents a transaction that adds
// or removes an IBC relayer address.
// The bytes contained in each variant are the address to add or remove.
type IbcRelayerChangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*IbcRelayerChangeAction_Addition
	//	*IbcRelayerChangeAction_Removal
	Value isIbcRelayerChangeAction_Value `protobuf_oneof:"value"`
}

func (x *IbcRelayerChangeAction) Reset() {
	*x = IbcRelayerChangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IbcRelayerChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbcRelayerChangeAction) ProtoMessage() {}

func (x *IbcRelayerChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbcRelayerChangeAction.ProtoReflect.Descriptor instead.
func (*IbcRelayerChangeAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{11}
}

func (m *IbcRelayerChangeAction) GetValue() isIbcRelayerChangeAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *IbcRelayerChangeAction) GetAddition() *Address {
	if x, ok := x.GetValue().(*IbcRelayerChangeAction_Addition); ok {
		return x.Addition
	}
	return nil
}

func (x *IbcRelayerChangeAction) GetRemoval() *Address {
	if x, ok := x.GetValue().(*IbcRelayerChangeAction_Removal); ok {
		return x.Removal
	}
	return nil
}

type isIbcRelayerChangeAction_Value interface {
	isIbcRelayerChangeAction_Value()
}

type IbcRelayerChangeAction_Addition struct {
	Addition *Address `protobuf:"bytes,1,opt,name=addition,proto3,oneof"`
}

type IbcRelayerChangeAction_Removal struct {
	Removal *Address `protobuf:"bytes,2,opt,name=removal,proto3,oneof"`
}

func (*IbcRelayerChangeAction_Addition) isIbcRelayerChangeAction_Value() {}

func (*IbcRelayerChangeAction_Removal) isIbcRelayerChangeAction_Value() {}

// `FeeAssetChangeAction` represents a transaction that adds
// or removes an asset for fee payments.
type FeeAssetChangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FeeAssetChangeAction_Addition
	//	*FeeAssetChangeAction_Removal
	Value isFeeAssetChangeAction_Value `protobuf_oneof:"value"`
}

func (x *FeeAssetChangeAction) Reset() {
	*x = FeeAssetChangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeAssetChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeAssetChangeAction) ProtoMessage() {}

func (x *FeeAssetChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeAssetChangeAction.ProtoReflect.Descriptor instead.
func (*FeeAssetChangeAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{12}
}

func (m *FeeAssetChangeAction) GetValue() isFeeAssetChangeAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FeeAssetChangeAction) GetAddition() string {
	if x, ok := x.GetValue().(*FeeAssetChangeAction_Addition); ok {
		return x.Addition
	}
	return ""
}

func (x *FeeAssetChangeAction) GetRemoval() string {
	if x, ok := x.GetValue().(*FeeAssetChangeAction_Removal); ok {
		return x.Removal
	}
	return ""
}

type isFeeAssetChangeAction_Value interface {
	isFeeAssetChangeAction_Value()
}

type FeeAssetChangeAction_Addition struct {
	Addition string `protobuf:"bytes,1,opt,name=addition,proto3,oneof"`
}

type FeeAssetChangeAction_Removal struct {
	Removal string `protobuf:"bytes,2,opt,name=removal,proto3,oneof"`
}

func (*FeeAssetChangeAction_Addition) isFeeAssetChangeAction_Value() {}

func (*FeeAssetChangeAction_Removal) isFeeAssetChangeAction_Value() {}

// `InitBridgeAccountAction` represents a transaction that initializes
// a bridge account for the given rollup on the chain.
//
// The sender of the transaction is used as the owner of the bridge account
// and is the only actor authorized to transfer out of this account via
// a `TransferAction`.
type InitBridgeAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the rollup ID to register with the bridge account (the tx sender)
	RollupId *RollupId `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	// the asset ID accepted as an incoming transfer by the bridge account
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,3,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	// the address corresponding to the key which has sudo capabilities;
	// ie. can change the sudo and withdrawer addresses for this bridge account.
	// if this is empty, the sender of the transaction is used.
	SudoAddress *Address `protobuf:"bytes,4,opt,name=sudo_address,json=sudoAddress,proto3" json:"sudo_address,omitempty"`
	// the address corresponding to the key which can withdraw funds from this bridge account.
	// if this is empty, the sender of the transaction is used.
	WithdrawerAddress *Address `protobuf:"bytes,5,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
}

func (x *InitBridgeAccountAction) Reset() {
	*x = InitBridgeAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitBridgeAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitBridgeAccountAction) ProtoMessage() {}

func (x *InitBridgeAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitBridgeAccountAction.ProtoReflect.Descriptor instead.
func (*InitBridgeAccountAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{13}
}

func (x *InitBridgeAccountAction) GetRollupId() *RollupId {
	if x != nil {
		return x.RollupId
	}
	return nil
}

func (x *InitBridgeAccountAction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *InitBridgeAccountAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

func (x *InitBridgeAccountAction) GetSudoAddress() *Address {
	if x != nil {
		return x.SudoAddress
	}
	return nil
}

func (x *InitBridgeAccountAction) GetWithdrawerAddress() *Address {
	if x != nil {
		return x.WithdrawerAddress
	}
	return nil
}

// `BridgeLockAction` represents a transaction that transfers
// funds from a sequencer account to a bridge account.
//
// It's the same as a `TransferAction` but with the added
// `destination_chain_address` field.
type BridgeLockAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the address of the bridge account to transfer to
	To *Address `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// the amount to transfer
	Amount *Uint128 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// the asset to be transferred
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,4,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	// the address on the destination chain which
	// will receive the bridged funds
	DestinationChainAddress string `protobuf:"bytes,5,opt,name=destination_chain_address,json=destinationChainAddress,proto3" json:"destination_chain_address,omitempty"`
}

func (x *BridgeLockAction) Reset() {
	*x = BridgeLockAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeLockAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeLockAction) ProtoMessage() {}

func (x *BridgeLockAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeLockAction.ProtoReflect.Descriptor instead.
func (*BridgeLockAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{14}
}

func (x *BridgeLockAction) GetTo() *Address {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BridgeLockAction) GetAmount() *Uint128 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BridgeLockAction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *BridgeLockAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

func (x *BridgeLockAction) GetDestinationChainAddress() string {
	if x != nil {
		return x.DestinationChainAddress
	}
	return ""
}

// `BridgeUnlockAction` represents a transaction that transfers
// funds from a bridge account to a sequencer account.
//
// It's the same as a `TransferAction` but without the `asset` field
// and with the `memo` field.
type BridgeUnlockAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the to withdraw funds to
	To *Address `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// the amount to transfer
	Amount *Uint128 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,3,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	// memo for double spend prevention
	Memo []byte `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	// the address of the bridge account to transfer from,
	// if the bridge account's withdrawer address is not the same as the bridge address.
	// if unset, the signer of the transaction is used.
	BridgeAddress *Address `protobuf:"bytes,5,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
}

func (x *BridgeUnlockAction) Reset() {
	*x = BridgeUnlockAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeUnlockAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeUnlockAction) ProtoMessage() {}

func (x *BridgeUnlockAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeUnlockAction.ProtoReflect.Descriptor instead.
func (*BridgeUnlockAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{15}
}

func (x *BridgeUnlockAction) GetTo() *Address {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BridgeUnlockAction) GetAmount() *Uint128 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BridgeUnlockAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

func (x *BridgeUnlockAction) GetMemo() []byte {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *BridgeUnlockAction) GetBridgeAddress() *Address {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

type BridgeSudoChangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the address of the bridge account to change the sudo or withdrawer addresses for
	BridgeAddress *Address `protobuf:"bytes,1,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	// the new sudo address; unchanged if unset
	NewSudoAddress *Address `protobuf:"bytes,2,opt,name=new_sudo_address,json=newSudoAddress,proto3" json:"new_sudo_address,omitempty"`
	// the new withdrawer address; unchanged if unset
	NewWithdrawerAddress *Address `protobuf:"bytes,3,opt,name=new_withdrawer_address,json=newWithdrawerAddress,proto3" json:"new_withdrawer_address,omitempty"`
	// the asset used to pay the transaction fee
	FeeAsset string `protobuf:"bytes,4,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
}

func (x *BridgeSudoChangeAction) Reset() {
	*x = BridgeSudoChangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeSudoChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeSudoChangeAction) ProtoMessage() {}

func (x *BridgeSudoChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeSudoChangeAction.ProtoReflect.Descriptor instead.
func (*BridgeSudoChangeAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{16}
}

func (x *BridgeSudoChangeAction) GetBridgeAddress() *Address {
	if x != nil {
		return x.BridgeAddress
	}
	return nil
}

func (x *BridgeSudoChangeAction) GetNewSudoAddress() *Address {
	if x != nil {
		return x.NewSudoAddress
	}
	return nil
}

func (x *BridgeSudoChangeAction) GetNewWithdrawerAddress() *Address {
	if x != nil {
		return x.NewWithdrawerAddress
	}
	return nil
}

func (x *BridgeSudoChangeAction) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

type FeeChangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// note that the proto number ranges are doubled from that of `Action`.
	// this to accomodate both `base_fee` and `byte_cost_multiplier` for each action.
	//
	// Types that are assignable to Value:
	//
	//	*FeeChangeAction_TransferBaseFee
	//	*FeeChangeAction_SequenceBaseFee
	//	*FeeChangeAction_SequenceByteCostMultiplier
	//	*FeeChangeAction_InitBridgeAccountBaseFee
	//	*FeeChangeAction_BridgeLockByteCostMultiplier
	//	*FeeChangeAction_BridgeSudoChangeBaseFee
	//	*FeeChangeAction_Ics20WithdrawalBaseFee
	Value isFeeChangeAction_Value `protobuf_oneof:"value"`
}

func (x *FeeChangeAction) Reset() {
	*x = FeeChangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeChangeAction) ProtoMessage() {}

func (x *FeeChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeChangeAction.ProtoReflect.Descriptor instead.
func (*FeeChangeAction) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{17}
}

func (m *FeeChangeAction) GetValue() isFeeChangeAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FeeChangeAction) GetTransferBaseFee() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_TransferBaseFee); ok {
		return x.TransferBaseFee
	}
	return nil
}

func (x *FeeChangeAction) GetSequenceBaseFee() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_SequenceBaseFee); ok {
		return x.SequenceBaseFee
	}
	return nil
}

func (x *FeeChangeAction) GetSequenceByteCostMultiplier() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_SequenceByteCostMultiplier); ok {
		return x.SequenceByteCostMultiplier
	}
	return nil
}

func (x *FeeChangeAction) GetInitBridgeAccountBaseFee() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_InitBridgeAccountBaseFee); ok {
		return x.InitBridgeAccountBaseFee
	}
	return nil
}

func (x *FeeChangeAction) GetBridgeLockByteCostMultiplier() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_BridgeLockByteCostMultiplier); ok {
		return x.BridgeLockByteCostMultiplier
	}
	return nil
}

func (x *FeeChangeAction) GetBridgeSudoChangeBaseFee() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_BridgeSudoChangeBaseFee); ok {
		return x.BridgeSudoChangeBaseFee
	}
	return nil
}

func (x *FeeChangeAction) GetIcs20WithdrawalBaseFee() *Uint128 {
	if x, ok := x.GetValue().(*FeeChangeAction_Ics20WithdrawalBaseFee); ok {
		return x.Ics20WithdrawalBaseFee
	}
	return nil
}

type isFeeChangeAction_Value interface {
	isFeeChangeAction_Value()
}

type FeeChangeAction_TransferBaseFee struct {
	// core protocol fees are defined on 1-20
	TransferBaseFee *Uint128 `protobuf:"bytes,1,opt,name=transfer_base_fee,json=transferBaseFee,proto3,oneof"`
}

type FeeChangeAction_SequenceBaseFee struct {
	SequenceBaseFee *Uint128 `protobuf:"bytes,2,opt,name=sequence_base_fee,json=sequenceBaseFee,proto3,oneof"`
}

type FeeChangeAction_SequenceByteCostMultiplier struct {
	SequenceByteCostMultiplier *Uint128 `protobuf:"bytes,3,opt,name=sequence_byte_cost_multiplier,json=sequenceByteCostMultiplier,proto3,oneof"`
}

type FeeChangeAction_InitBridgeAccountBaseFee struct {
	// bridge fees are defined on 20-39
	InitBridgeAccountBaseFee *Uint128 `protobuf:"bytes,20,opt,name=init_bridge_account_base_fee,json=initBridgeAccountBaseFee,proto3,oneof"`
}

type FeeChangeAction_BridgeLockByteCostMultiplier struct {
	BridgeLockByteCostMultiplier *Uint128 `protobuf:"bytes,21,opt,name=bridge_lock_byte_cost_multiplier,json=bridgeLockByteCostMultiplier,proto3,oneof"`
}

type FeeChangeAction_BridgeSudoChangeBaseFee struct {
	BridgeSudoChangeBaseFee *Uint128 `protobuf:"bytes,22,opt,name=bridge_sudo_change_base_fee,json=bridgeSudoChangeBaseFee,proto3,oneof"`
}

type FeeChangeAction_Ics20WithdrawalBaseFee struct {
	// ibc fees are defined on 40-59
	Ics20WithdrawalBaseFee *Uint128 `protobuf:"bytes,40,opt,name=ics20_withdrawal_base_fee,json=ics20WithdrawalBaseFee,proto3,oneof"`
}

func (*FeeChangeAction_TransferBaseFee) isFeeChangeAction_Value() {}

func (*FeeChangeAction_SequenceBaseFee) isFeeChangeAction_Value() {}

func (*FeeChangeAction_SequenceByteCostMultiplier) isFeeChangeAction_Value() {}

func (*FeeChangeAction_InitBridgeAccountBaseFee) isFeeChangeAction_Value() {}

func (*FeeChangeAction_BridgeLockByteCostMultiplier) isFeeChangeAction_Value() {}

func (*FeeChangeAction_BridgeSudoChangeBaseFee) isFeeChangeAction_Value() {}

func (*FeeChangeAction_Ics20WithdrawalBaseFee) isFeeChangeAction_Value() {}

// SubmitRollupTransactionRequest contains a rollup transaction to be submitted to the Shared Sequencer Network
// via the Composer
type SubmitSequencerTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *SubmitSequencerTransactionRequest) Reset() {
	*x = SubmitSequencerTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitSequencerTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSequencerTransactionRequest) ProtoMessage() {}

func (x *SubmitSequencerTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSequencerTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitSequencerTransactionRequest) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{18}
}

func (x *SubmitSequencerTransactionRequest) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// SubmitRollupTransactionResponse is a message that represents a response to a request to submit a rollup.
// It's currently an empty response which can be evolved in the future to include more information
type SubmitSequencerTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitSequencerTransactionResponse) Reset() {
	*x = SubmitSequencerTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_receiver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitSequencerTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSequencerTransactionResponse) ProtoMessage() {}

func (x *SubmitSequencerTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_receiver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSequencerTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitSequencerTransactionResponse) Descriptor() ([]byte, []int) {
	return file_grpc_receiver_proto_rawDescGZIP(), []int{19}
}

var File_grpc_receiver_proto protoreflect.FileDescriptor

var file_grpc_receiver_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22,
	0x29, 0x0a, 0x07, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x68, 0x69, 0x22, 0x62, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x36,
	0x0a, 0x05, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x20, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x80, 0x09, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a,
	0x14, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6d, 0x0a, 0x19, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x75,
	0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x10, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x64, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x17, 0x73, 0x75, 0x64, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x19, 0x69, 0x62, 0x63, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x16, 0x69, 0x62, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x17, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x15, 0x4a, 0x04,
	0x08, 0x17, 0x10, 0x1f, 0x4a, 0x04, 0x08, 0x38, 0x10, 0x3d, 0x4a, 0x04, 0x08, 0x36, 0x10, 0x37,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x49, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x17, 0x53, 0x75, 0x64, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf9, 0x03, 0x0a, 0x0f, 0x49, 0x63, 0x73, 0x32, 0x30, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x5d, 0x0a, 0x09, 0x49, 0x62, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xa1, 0x01, 0x0a, 0x16, 0x49, 0x62, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x14, 0x46, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa5, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x49, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x44, 0x0a, 0x0c, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x73, 0x75, 0x64, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x32, 0x38, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x48, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x16, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x6e, 0x65, 0x77,
	0x53, 0x75, 0x64, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14,
	0x6e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x22, 0xb9, 0x05, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x66, 0x0a, 0x1d, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32,
	0x38, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x63, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x6b, 0x0a, 0x20, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32,
	0x38, 0x48, 0x00, 0x52, 0x1c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x61, 0x0a, 0x1b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x64, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x17, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x48, 0x00, 0x52, 0x16, 0x69, 0x63,
	0x73, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x65, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a,
	0x21, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x22,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xbb, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x61, 0x73, 0x74, 0x72, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x1f, 0x5a, 0x1d, 0x73, 0x70, 0x61, 0x6d, 0x6f, 0x6f, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_receiver_proto_rawDescOnce sync.Once
	file_grpc_receiver_proto_rawDescData = file_grpc_receiver_proto_rawDesc
)

func file_grpc_receiver_proto_rawDescGZIP() []byte {
	file_grpc_receiver_proto_rawDescOnce.Do(func() {
		file_grpc_receiver_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_receiver_proto_rawDescData)
	})
	return file_grpc_receiver_proto_rawDescData
}

var file_grpc_receiver_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_grpc_receiver_proto_goTypes = []interface{}{
	(*Uint128)(nil),                            // 0: astria.composer.v1alpha1.Uint128
	(*Proof)(nil),                              // 1: astria.composer.v1alpha1.Proof
	(*Denom)(nil),                              // 2: astria.composer.v1alpha1.Denom
	(*RollupId)(nil),                           // 3: astria.composer.v1alpha1.RollupId
	(*Address)(nil),                            // 4: astria.composer.v1alpha1.Address
	(*Action)(nil),                             // 5: astria.composer.v1alpha1.Action
	(*TransferAction)(nil),                     // 6: astria.composer.v1alpha1.TransferAction
	(*SequenceAction)(nil),                     // 7: astria.composer.v1alpha1.SequenceAction
	(*SudoAddressChangeAction)(nil),            // 8: astria.composer.v1alpha1.SudoAddressChangeAction
	(*Ics20Withdrawal)(nil),                    // 9: astria.composer.v1alpha1.Ics20Withdrawal
	(*IbcHeight)(nil),                          // 10: astria.composer.v1alpha1.IbcHeight
	(*IbcRelayerChangeAction)(nil),             // 11: astria.composer.v1alpha1.IbcRelayerChangeAction
	(*FeeAssetChangeAction)(nil),               // 12: astria.composer.v1alpha1.FeeAssetChangeAction
	(*InitBridgeAccountAction)(nil),            // 13: astria.composer.v1alpha1.InitBridgeAccountAction
	(*BridgeLockAction)(nil),                   // 14: astria.composer.v1alpha1.BridgeLockAction
	(*BridgeUnlockAction)(nil),                 // 15: astria.composer.v1alpha1.BridgeUnlockAction
	(*BridgeSudoChangeAction)(nil),             // 16: astria.composer.v1alpha1.BridgeSudoChangeAction
	(*FeeChangeAction)(nil),                    // 17: astria.composer.v1alpha1.FeeChangeAction
	(*SubmitSequencerTransactionRequest)(nil),  // 18: astria.composer.v1alpha1.SubmitSequencerTransactionRequest
	(*SubmitSequencerTransactionResponse)(nil), // 19: astria.composer.v1alpha1.SubmitSequencerTransactionResponse
}
var file_grpc_receiver_proto_depIdxs = []int32{
	6,  // 0: astria.composer.v1alpha1.Action.transfer_action:type_name -> astria.composer.v1alpha1.TransferAction
	7,  // 1: astria.composer.v1alpha1.Action.sequence_action:type_name -> astria.composer.v1alpha1.SequenceAction
	13, // 2: astria.composer.v1alpha1.Action.init_bridge_account_action:type_name -> astria.composer.v1alpha1.InitBridgeAccountAction
	14, // 3: astria.composer.v1alpha1.Action.bridge_lock_action:type_name -> astria.composer.v1alpha1.BridgeLockAction
	15, // 4: astria.composer.v1alpha1.Action.bridge_unlock_action:type_name -> astria.composer.v1alpha1.BridgeUnlockAction
	16, // 5: astria.composer.v1alpha1.Action.bridge_sudo_change_action:type_name -> astria.composer.v1alpha1.BridgeSudoChangeAction
	9,  // 6: astria.composer.v1alpha1.Action.ics20_withdrawal:type_name -> astria.composer.v1alpha1.Ics20Withdrawal
	8,  // 7: astria.composer.v1alpha1.Action.sudo_address_change_action:type_name -> astria.composer.v1alpha1.SudoAddressChangeAction
	11, // 8: astria.composer.v1alpha1.Action.ibc_relayer_change_action:type_name -> astria.composer.v1alpha1.IbcRelayerChangeAction
	12, // 9: astria.composer.v1alpha1.Action.fee_asset_change_action:type_name -> astria.composer.v1alpha1.FeeAssetChangeAction
	17, // 10: astria.composer.v1alpha1.Action.fee_change_action:type_name -> astria.composer.v1alpha1.FeeChangeAction
	4,  // 11: astria.composer.v1alpha1.TransferAction.to:type_name -> astria.composer.v1alpha1.Address
	0,  // 12: astria.composer.v1alpha1.TransferAction.amount:type_name -> astria.composer.v1alpha1.Uint128
	3,  // 13: astria.composer.v1alpha1.SequenceAction.rollup_id:type_name -> astria.composer.v1alpha1.RollupId
	4,  // 14: astria.composer.v1alpha1.SudoAddressChangeAction.new_address:type_name -> astria.composer.v1alpha1.Address
	0,  // 15: astria.composer.v1alpha1.Ics20Withdrawal.amount:type_name -> astria.composer.v1alpha1.Uint128
	4,  // 16: astria.composer.v1alpha1.Ics20Withdrawal.return_address:type_name -> astria.composer.v1alpha1.Address
	10, // 17: astria.composer.v1alpha1.Ics20Withdrawal.timeout_height:type_name -> astria.composer.v1alpha1.IbcHeight
	4,  // 18: astria.composer.v1alpha1.Ics20Withdrawal.bridge_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 19: astria.composer.v1alpha1.IbcRelayerChangeAction.addition:type_name -> astria.composer.v1alpha1.Address
	4,  // 20: astria.composer.v1alpha1.IbcRelayerChangeAction.removal:type_name -> astria.composer.v1alpha1.Address
	3,  // 21: astria.composer.v1alpha1.InitBridgeAccountAction.rollup_id:type_name -> astria.composer.v1alpha1.RollupId
	4,  // 22: astria.composer.v1alpha1.InitBridgeAccountAction.sudo_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 23: astria.composer.v1alpha1.InitBridgeAccountAction.withdrawer_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 24: astria.composer.v1alpha1.BridgeLockAction.to:type_name -> astria.composer.v1alpha1.Address
	0,  // 25: astria.composer.v1alpha1.BridgeLockAction.amount:type_name -> astria.composer.v1alpha1.Uint128
	4,  // 26: astria.composer.v1alpha1.BridgeUnlockAction.to:type_name -> astria.composer.v1alpha1.Address
	0,  // 27: astria.composer.v1alpha1.BridgeUnlockAction.amount:type_name -> astria.composer.v1alpha1.Uint128
	4,  // 28: astria.composer.v1alpha1.BridgeUnlockAction.bridge_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 29: astria.composer.v1alpha1.BridgeSudoChangeAction.bridge_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 30: astria.composer.v1alpha1.BridgeSudoChangeAction.new_sudo_address:type_name -> astria.composer.v1alpha1.Address
	4,  // 31: astria.composer.v1alpha1.BridgeSudoChangeAction.new_withdrawer_address:type_name -> astria.composer.v1alpha1.Address
	0,  // 32: astria.composer.v1alpha1.FeeChangeAction.transfer_base_fee:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 33: astria.composer.v1alpha1.FeeChangeAction.sequence_base_fee:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 34: astria.composer.v1alpha1.FeeChangeAction.sequence_byte_cost_multiplier:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 35: astria.composer.v1alpha1.FeeChangeAction.init_bridge_account_base_fee:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 36: astria.composer.v1alpha1.FeeChangeAction.bridge_lock_byte_cost_multiplier:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 37: astria.composer.v1alpha1.FeeChangeAction.bridge_sudo_change_base_fee:type_name -> astria.composer.v1alpha1.Uint128
	0,  // 38: astria.composer.v1alpha1.FeeChangeAction.ics20_withdrawal_base_fee:type_name -> astria.composer.v1alpha1.Uint128
	5,  // 39: astria.composer.v1alpha1.SubmitSequencerTransactionRequest.action:type_name -> astria.composer.v1alpha1.Action
	18, // 40: astria.composer.v1alpha1.SequencerGrpcCollectorService.SubmitSequencerTransaction:input_type -> astria.composer.v1alpha1.SubmitSequencerTransactionRequest
	19, // 41: astria.composer.v1alpha1.SequencerGrpcCollectorService.SubmitSequencerTransaction:output_type -> astria.composer.v1alpha1.SubmitSequencerTransactionResponse
	41, // [41:42] is the sub-list for method output_type
	40, // [40:41] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_grpc_receiver_proto_init() }
func file_grpc_receiver_proto_init() {
	if File_grpc_receiver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_receiver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint128); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Denom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SudoAddressChangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ics20Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IbcHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IbcRelayerChangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeAssetChangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitBridgeAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeLockAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeUnlockAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeSudoChangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeChangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitSequencerTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_receiver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitSequencerTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_receiver_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Action_TransferAction)(nil),
		(*Action_SequenceAction)(nil),
		(*Action_InitBridgeAccountAction)(nil),
		(*Action_BridgeLockAction)(nil),
		(*Action_BridgeUnlockAction)(nil),
		(*Action_BridgeSudoChangeAction)(nil),
		(*Action_Ics20Withdrawal)(nil),
		(*Action_SudoAddressChangeAction)(nil),
		(*Action_IbcRelayerChangeAction)(nil),
		(*Action_FeeAssetChangeAction)(nil),
		(*Action_FeeChangeAction)(nil),
	}
	file_grpc_receiver_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*IbcRelayerChangeAction_Addition)(nil),
		(*IbcRelayerChangeAction_Removal)(nil),
	}
	file_grpc_receiver_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*FeeAssetChangeAction_Addition)(nil),
		(*FeeAssetChangeAction_Removal)(nil),
	}
	file_grpc_receiver_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*FeeChangeAction_TransferBaseFee)(nil),
		(*FeeChangeAction_SequenceBaseFee)(nil),
		(*FeeChangeAction_SequenceByteCostMultiplier)(nil),
		(*FeeChangeAction_InitBridgeAccountBaseFee)(nil),
		(*FeeChangeAction_BridgeLockByteCostMultiplier)(nil),
		(*FeeChangeAction_BridgeSudoChangeBaseFee)(nil),
		(*FeeChangeAction_Ics20WithdrawalBaseFee)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_receiver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_receiver_proto_goTypes,
		DependencyIndexes: file_grpc_receiver_proto_depIdxs,
		MessageInfos:      file_grpc_receiver_proto_msgTypes,
	}.Build()
	File_grpc_receiver_proto = out.File
	file_grpc_receiver_proto_rawDesc = nil
	file_grpc_receiver_proto_goTypes = nil
	file_grpc_receiver_proto_depIdxs = nil
}
